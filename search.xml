<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>域名解析的记录类型</title>
      <link href="/2018/11/05/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/11/05/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<ol><li><p><strong>什么是域名解析？</strong></p><p> 域名解析就是国际域名或者国内域名以及中文域名等域名申请后做的到IP地址的转换过程。IP地址是网路上标识您站点的数字地址，为了简单好记，采用域名来代替IP地址标识站点地址。域名的解析工作由DNS服务器完成。</p></li></ol><hr><ol start="2"><li><p><strong>什么是A记录？</strong></p><p> A (Address) 记录是用来指定主机名（或域名）对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的web server上。同时也可以设置您域名的二级域名。</p></li></ol><hr><ol start="3"><li><p><strong>什么是CNAME记录？</strong></p><p> 即：别名记录。这种记录允许您将多个名字映射到另外一个域名。通常用于同时提供WWW和MAIL服务的计算机。例如，有一台计算机名为”hostfurrer.fun”（A记录）。它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL 。这两个别名的全称就是<em>“<a href="http://www.furrer.fun&quot;" target="_blank" rel="noopener">www.furrer.fun&quot;</a></em> 和<em>“mail.furrer.fun”</em> 。实际上他们都指向<em>“host.furrer.fun”</em>。</p></li></ol><hr><ol><li><p><strong>使用A记录和CNAME进行域名解析的区别</strong></p><p> A记录就是把一个域名解析到一个IP地址（Address，特制数字IP地址），而CNAME记录就是把域名解析到另外一个域名。其功能是差不多，CNAME将几个主机名指向一个别名，其实跟指向IP地址是一样的，因为这个别名也要做一个A记录的。但是使用CNAME记录可以很方便地变更IP地址。如果一台服务器有100个网站，他们都做了别名，该台服务器变更IP时，只需要变更别名的A记录就可以了。</p></li></ol><hr><ol start="5"><li><p><strong>使用A记录和CNAME哪个好？</strong></p><p> 域名解析CNAME记录A记录哪一种比较好？如果论对网站的影响，就没有多大区别。但是：CNAME有一个好处就是稳定，就好像一个IP与一个域名的区别。服务商从方便维护的角度，一般也建议用户使用CNAME记录绑定域名的。如果主机使用了双线IP，显然使用CNAME也要方便一些。</p></li></ol><hr><p>###<strong>主机记录：</strong></p><ol><li><p>www表示解析后域名为 www.域名</p></li><li><p>@表示直接解析主域名  </p></li><li><p><em>表示泛解析 </em>.域名</p></li></ol><hr><p>###<strong>记录类型：</strong></p><ul><li><p>A记录：地址记录，用来指定域名的IPv4地址，如果需要将域名指向一个IP地址，就需要添加A记录。</p></li><li><p>CNAME： 如果需要将域名指向另一个域名，再由另一个域名提供ip地址，就需要添加CNAME记录。</p></li><li><p>TXT：在这里可以填写任何东西，长度限制255。绝大多数的TXT记录是用来做SPF记录（反垃圾邮件）。</p></li><li><p>NS：域名服务器记录，如果需要把子域名交给其他DNS服务商解析，就需要添加NS记录。</p></li><li><p>AAAA：用来指定主机名（或域名）对应的IPv6地址（例如：ff06:0:0:0:0:0:0:c3）记录。</p></li><li><p>MX：如果需要设置邮箱，让邮箱能收到邮件，就需要添加MX记录。</p></li><li><p>显性URL：从一个地址301重定向到另一个地址的时候，就需要添加显性URL记录（注：DNSPod目前只支持301重定向）。</p></li><li><p>隐性URL：类似于显性URL，区别在于隐性URL不会改变地址栏中的域名。</p></li><li><p>SRV：记录了哪台计算机提供了哪个服务。格式为：服务的名字、点、协议的类型</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pat乙级1001解题报告</title>
      <link href="/2018/10/28/pta%E4%B9%99%E7%BA%A71001%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/10/28/pta%E4%B9%99%E7%BA%A71001%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h6 id="1001-害死人不偿命的-3n-1-猜想-（15-分）"><a href="#1001-害死人不偿命的-3n-1-猜想-（15-分）" class="headerlink" title="1001 害死人不偿命的(3n+1)猜想 （15 分）"></a>1001 害死人不偿命的(3n+1)猜想 （15 分）</h6><hr><p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n=1？</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h1><hr><p>每个测试输入包含 1 个测试用例，即给出正整数 n 的值。</p><h1 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h1><hr><p>输出从 n 计算到 1 需要的步数。</p><h1 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h1><hr><p>3</p><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="#输出样例："></a>#输出样例：</h2><p>5</p><hr><p>java代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>cout<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        Scanner sc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                n<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            cout<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h5 id="解题报告："><a href="#解题报告：" class="headerlink" title="解题报告："></a>解题报告：</h5><hr><ul><li>算法实现很简单，以前打比赛的时候习惯用C++，现在学了java，就试着用java去实现，也顺便学习一下java，太久没有敲代码了，很多基本语法都不熟悉，直奔主题吧。<ol><li>键盘输入数据，必须先用关键字<em>import</em>引入<em>java.util</em>包中的<em>Scanner类</em>，然后创建一个<em>Scanner</em>对象，再按需调用该对象的引入方法即可实现键盘输入各种数据类型的数据。</li><li>Scanner*类的常用方法<ol><li>字符串输入<ul><li>next()<ol><li>一定要读取到有效字符后才可以结束输入。</li><li>对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>不能得到带有空格的字符串。</li></ol></li><li>nextLine()<ol><li>以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li><li>可以获得空白。</li></ol></li></ul></li><li>其他数据类型<ul><li>int—————-nextInt().</li><li>float———- -nextFloat().</li><li>double——nextDouble().</li><li><strong><em>备注：输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取。</em></strong></li></ul></li></ol></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级水题 </tag>
            
            <tag> 算法学习 </tag>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello world!</title>
      <link href="/2018/10/20/hello-world/"/>
      <url>/2018/10/20/hello-world/</url>
      
        <content type="html"><![CDATA[<h6 id="第一篇博客写给自己———勿忘初心。"><a href="#第一篇博客写给自己———勿忘初心。" class="headerlink" title="第一篇博客写给自己———勿忘初心。"></a>第一篇博客写给自己———勿忘初心。</h6><hr><ul><li>不知不觉间，大三的老学长了，想想自己前段时间的纠结—考研还是就业？其实现在想想也挺好笑的，有什么好纠结的呢，考研好点的学校门槛都进不了，读差点的学校研，一切还是得靠自己，所以，对计科专业的我来说，这样子读三年混个硕士文凭还不如出去就业攒三年工作经验成长得多。</li><li>但是现在的自己，没有什么实际的能力，没有什么拿得出手的东西……这样子出去还怎么混，所以在此立下flag，每周更一博，记录自己的所学所获，坚持下去，java、linux、数据结构、python等等，还有一大堆等着，接下来一年，加油~~~</li></ul>]]></content>
      
      
      <categories>
          
          <category> 牢骚 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自勉 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
